<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.greaterbank</groupId>
  <artifactId>transactionprocessing</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  
  
	<properties>
		<java.version>1.8</java.version>
		<spring.version>4.3.9.RELEASE</spring.version>
		<spring.batch.version>3.0.7.RELEASE</spring.batch.version>
		<junit.version>4.13.1</junit.version>
	</properties>
  
  <dependencies>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		    <version>3.0</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-core</artifactId>
		   <version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-core</artifactId>
			<version>${spring.batch.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-infrastructure</artifactId>
			<version>${spring.batch.version}</version>
		</dependency>

		<!-- Spring Batch unit test -->
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-test</artifactId>
			<version>${spring.batch.version}</version>
		</dependency>

		<!-- Junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/log4j/log4j -->
		<dependency>
		    <groupId>log4j</groupId>
		    <artifactId>log4j</artifactId>
		    <version>1.2.17</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
		<dependency>
		    <groupId>org.mockito</groupId>
		    <artifactId>mockito-core</artifactId>
		    <version>2.10.0</version>
		    <scope>test</scope>
		</dependency>

				
		
  </dependencies>
  
  <build>
  	<finalName>TransactionProcessing</finalName>
  	<plugins>
  		<plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>2.5.1</version>
	        <configuration>
	          <source>${java.version}</source>
	          <target>${java.version}</target>
	        </configuration>
	      </plugin>  
	      
	      <plugin>
		    <groupId>org.jacoco</groupId>
		    <artifactId>jacoco-maven-plugin</artifactId>
		    <version>0.7.9</version>
		    <executions>
	        <!--
	            Prepares the property pointing to the JaCoCo runtime agent which
	            is passed as VM argument when Maven the Surefire plugin is executed.
	        -->
        		<execution>
		            <id>pre-unit-test</id>
		            <goals>
		                <goal>prepare-agent</goal>
		            </goals>
		            <configuration>
		                <!-- Sets the path to the file which contains the execution data. -->
		                <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
		                <!--
		                    Sets the name of the property containing the settings
		                    for JaCoCo runtime agent.
		                -->
		                <propertyName>surefireArgLine</propertyName>
		            </configuration>
        		</execution>
	        <!--
	            Ensures that the code coverage report for unit tests is created after
	            unit tests have been run.
	        -->	
		        <execution>
		            <id>post-unit-test</id>
		            <phase>test</phase>
		            <goals>
		                <goal>report</goal>
		            </goals>
		            <configuration>
		                <!-- Sets the path to the file which contains the execution data. -->
		                <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
		                <!-- Sets the output directory for the code coverage report. -->
		                <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
		            </configuration>
		        </execution>
		    </executions>
		</plugin>
		<plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-surefire-plugin</artifactId>
		    <version>2.15</version>
		    <configuration>
		        <!-- Sets the VM argument line used when unit tests are run. -->
		        <argLine>${surefireArgLine}</argLine>
		        <!-- Skips unit tests if the value of skip.unit.tests property is true -->
		        <skipTests>${skip.unit.tests}</skipTests>
		        <!-- Excludes integration tests when unit tests are run. -->
		        <excludes>
		            <exclude>**/IT*.java</exclude>
		        </excludes>
		    </configuration>
		</plugin>
  	<!-- =============================================================== -->
      <!-- use shade plugin to package spring project into executable jar  -->
      <!-- =============================================================== -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.3</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <!-- =================================================== -->
                <!--  define the main entry for the output jar file      -->
                <!-- =================================================== -->
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.greaterbank.transactionprocessing.TransactionProcessingApplication</mainClass>
                </transformer>
                <!-- =================================================== -->
                <!--  append all spring.handlers instead of overwriting  -->
                <!-- =================================================== -->
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/spring.handlers</resource>
                </transformer>
                <!-- =================================================== -->
                <!--  append all spring.schemas instead of overwriting   -->
                <!-- =================================================== -->
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/spring.schemas</resource>
                </transformer>
              </transformers>
              <!-- ============================================================ -->
              <!-- exclude any digital signiture file from third party jar file -->
              <!-- ============================================================ -->
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>
  	</plugins>
  </build>

	
</project>